Problem 1:
The feature that we get with individual handler functions is being able to 
retrieve the trap number and have a common handling function trap() for all
traps.
The processor does not pass any information about which interrupt number 
triggered calling the handler. By having a different handler for each one, 
we can hard-code the values and place them in a location so that we can
have a common handler function that switches on that value.

Problem 2:
Nothing special needed to be done other than having a handler for interrupts
13 and 14.
Calling int $14 is disallowed at CPL 3 since the DPL for gate 14 is 0.
This generates a general protection fault, which uses gate 13.
If the kernel allowed int $14 to work, then user programs could trigger
arbitrary page faults and potentially destabilize the system.

Problem 3:
The gate needs to be set up with a DPL of 3 so that it can be called from
user mode. The processor generates a GP fault when breakpoint is called
without this change because it sees a user-mode program (with CPL=3) trying
to trigger an interrupt with DPL=0. Changing the DPL to 3 fixes this problem.

Problem 4:
The point of these mechanisms is to prevent user-mode programs from triggering
privileged interrupts as a protection from both incorrect and malicious 
programs. An incorrect or malicious program could trigger interrupts to 
destabilize the system or send malicious data to the kernel. The TSS
also helps with this by ensuring that user stacks with potentially
incorrect or malicious data are not used for serving interrupts.
